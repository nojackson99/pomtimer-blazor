@page "/"

@using PomTimer.Client.Shared.Components.PomTimerFlatButton
@using PomTimer.Client.Shared.Components.PomTimerAnimatedButton

@inject IJSRuntime JSRuntime

<PageTitle>PomTimer</PageTitle>

<h1>Welcome to PomTimer Blazor</h1>

<div class="timer-container">
	<div class="session-buttons-container">
		<div class="session-button">
			<PomTimerFlatButton Text="Pomodoro" OnClick="TestClick"/>
		</div>
		<div class="session-button">
			<PomTimerFlatButton Text="Short Break" OnClick="TestClick"/>
		</div>
		<div class="session-button">
			<PomTimerFlatButton Text="Long Break" OnClick="TestClick"/>
		</div>
	</div>
	<div class="timer-display">
		@* DEBUG will be replaced with variable *@
		25:00
	</div>
	<div class= "timer-button-container">
		<div class= "timer-button">
		@* DEBUG replace text with variable *@
		<PomTimerAnimatedButton Text="Start" OnClick="TestClick"/>
		</div>
	</div>
	<div class= "active-task-container">
		No active task
	</div>
</div>

<PomTimerAnimatedButton Text="test easy timer" OnClick="CallEasyTimerTest"/>
<PomTimerAnimatedButton Text="test interop" OnClick="CallTestInterop"/>

@code 
{
	private void TestClick()
	{
		Console.WriteLine("Test Click");
	}

	private async Task CallEasyTimerTest()
	{
		string message = "testing easy timer with js interop";
		await JSRuntime.InvokeVoidAsync("testTimer", message);

		return;
	}

	private async Task CallTestInterop()
	{
		string message = "I'm executing this alert with js interop!";
		await JSRuntime.InvokeVoidAsync("testInterop", message);
	}
}